name: "Example Reusable Workflow"

on:
  workflow_call:
    inputs:
      input_sha:
        description: "Input SHA"
        type: string
        required: false
        default: "HEAD"
    secrets:
      secret_one:
        required: true
    outputs:
      change_type:
        description: "Change type between input_sha and previous commit"
        type: string
        value: ${{ steps.get-change-type.outputs.change_type }}
      current_time:
        description: "Current time"
        type: string
        value: ${{ steps.get-current-time.outputs.current_time }}

jobs:

  get-change-type:
    name: "Get Change Type"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      change_type: ${{ steps.get_change.outputs.change_type }}
    timeout-minutes: 5

    steps:
      - name: "Get change type between last two commits"
        id: get_change
        shell: bash
        env:
          INPUT_SHA: ${{ inputs.input_sha }}
          # > results in a space separated string
          FILTERS: >
            \.github/workflows/
            \.github/actions/
        run: |
          # 2>/dev/null suppresses the error message if the current directory is not a git repository
          # git rev-parse --is-inside-work-tree returns 'true' if the current directory is a git repository
          if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
            git fetch --verbose origin
            # replace ' ' with '|'
            regex=$(echo $FILTERS | sed "s/ /|/g")
            files_changed=$(git diff-tree --name-only -r "${INPUT_SHA}^" "${INPUT_SHA}")
            # get files that match regex
            if [ echo "${files_changed}" | grep -E $regex]; then
              echo "Pipeline files have been modified - commit change type: pipeline"
              change_type="pipeline"
            else
              echo "No pipeline files have been modified - commit change type: app"
              change_type="app"
            fi
          else
            echo "Failure occurred before git clone; unknown change type"
            change_type="unknown"
          fi

          echo "change_type=${change_type}" >> "${GITHUB_OUTPUT}"

      - name: "Echo change type"
        shell: bash
        env:
          CHANGE_TYPE: ${{ steps.get_change.outputs.change_type}}
        run: |
          # use the change type in observability, for example
          echo "change_type=${CHANGE_TYPE}" | tee --append "${GITHUB_OUTPUT}"

  get-current-time:
    name: "Get Current Time"
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      current_time: ${{ steps.get_time.outputs.current_time }}
    steps:
      - name: "Get current time"
        id: get_time
        run: |
          echo "current_time=$(date)" >> "${GITHUB_OUTPUT}"